<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Categories on Lab.Koreanbear|한국곰연구소</title>
    <link>https://koreanbear89.github.io/categories/</link>
    <description>Recent content in Categories on Lab.Koreanbear|한국곰연구소</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 13 Mar 2023 09:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://koreanbear89.github.io/categories/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Effective Python | #3 Functions</title>
      <link>https://koreanbear89.github.io/engineering/9.-study/effective-python-03/</link>
      <pubDate>Mon, 06 Feb 2023 09:00:00 +0000</pubDate>
      
      <guid>https://koreanbear89.github.io/engineering/9.-study/effective-python-03/</guid>
      <description>Introduction Functions in Python have a variety of extra features that make a programmer’s life easier.
Some are similar to capabilities in other programming languages, but many are unique to Python. These extras can make a function’s purpose more obvious.
They can eliminate noise and clarify the intention of callers.
They can significantly reduce subtle bugs that are difficult to find.
Item 19. Never Unpack More Than Three Variables When Functions Return Multiple Values You can have functions return multiple values by putting them in a tuple and having the caller take advantage of Python’s unpacking syntax.</description>
    </item>
    
    <item>
      <title>Effective Python | #2 Lists and Dictionaries</title>
      <link>https://koreanbear89.github.io/engineering/9.-study/effective-python-02/</link>
      <pubDate>Wed, 25 Jan 2023 09:00:00 +0000</pubDate>
      
      <guid>https://koreanbear89.github.io/engineering/9.-study/effective-python-02/</guid>
      <description>Introduction In Python, the most common way to automate repetitive tasks is by using a sequence of values stored in a list type.
A natural complement to lists is the dict type, which stores lookup keys mapped to corresponding values (in what is often called an associative array or a hash table
Item 11. Know How to Slice Sequences Avoid being verbose when slicing: Don’t supply 0 for the start index or the length of the sequence for the end index.</description>
    </item>
    
    <item>
      <title>Effective Python | #1 Pythonic Thinking</title>
      <link>https://koreanbear89.github.io/engineering/9.-study/effective-python-01/</link>
      <pubDate>Mon, 09 Jan 2023 09:00:00 +0000</pubDate>
      
      <guid>https://koreanbear89.github.io/engineering/9.-study/effective-python-01/</guid>
      <description>Introduction The Pythonic style isn’t regimented or enforced by the compiler. It has emerged over time through experience using the language and working with others.
Python programmers prefer to be explicit, to choose simple over complex, and to maximize readability. Item 1. Know Which Version of Python You’re Using Throughout this book, the majority of example code is in the syntax of Python 3.7 (released in June 2018).
This book also provides some examples in the syntax of Python 3.</description>
    </item>
    
    <item>
      <title>CheatSheet | GlusterFS</title>
      <link>https://koreanbear89.github.io/engineering/1.-cheatsheets/cheatsheet-glusterfs/</link>
      <pubDate>Fri, 25 Mar 2022 09:00:13 +0000</pubDate>
      
      <guid>https://koreanbear89.github.io/engineering/1.-cheatsheets/cheatsheet-glusterfs/</guid>
      <description>1. Introduction GlusterFS : is a Scalable Network Filesystem Brick : is the basic unit of storage in GlusterFS, Volume : is a logical collection of bricks. Create volume with bricks from several nodes (peer) And mount volume to the specific location to use volume like virtual Storage References Tutorial: Create a Docker Swarm with Persistent Storage Using GlusterFS – The New Stack # install GlusterFS on CentOS sudo yum install centos-release-gluster sudo yum install glusterfs-server sudo systemctl start glusterd # start daemon sudo systemctl enable glusterd # restart daemon when reboot the machine # Configure Gluster Volume gluster peer probe &amp;lt;HOST_NAME&amp;gt; # connect HOST as peer gluster pool list # show gluster peers # Create Volume sudo mkdir -p /&amp;lt;BRICK_DIR&amp;gt; # run on all machines sudo gluster volume create &amp;lt;VOLUME_NAME&amp;gt; replica &amp;lt;N&amp;gt; &amp;lt;HOST1&amp;gt;:&amp;lt;BRICK_DIR&amp;gt; &amp;lt;HOST2&amp;gt;:&amp;lt;BRICK_DIR&amp;gt; &amp;lt;HOST3&amp;gt;:&amp;lt;BRICK_DIR&amp;gt; force # run only on the master # ex) sudo gluster volume create gluster_pvs replica 4 &amp;lt;HOSTNAME&amp;gt;:/home1/&amp;lt;USER&amp;gt;/whome/__oss/gs_pvs pgsca2x0351:/home1/&amp;lt;USER&amp;gt;/whome/__oss/gs_pvs &amp;lt;HOSTNAME&amp;gt;:/home1/irteam/whome/__oss/gs_pvs pgsca2x0353:/home1/irteam/whome/__oss/gs_pvs force # Start Volume sudo gluster volume start &amp;lt;VOLUME_NAME&amp;gt; # run only on the master sudo mount.</description>
    </item>
    
    <item>
      <title>Shell | Snippet </title>
      <link>https://koreanbear89.github.io/engineering/2.-languages/shell-snippet/</link>
      <pubDate>Mon, 15 Nov 2021 09:00:13 +0000</pubDate>
      
      <guid>https://koreanbear89.github.io/engineering/2.-languages/shell-snippet/</guid>
      <description>Introduction &amp;ldquo;#!&amp;rdquo;, defines shell to run script like #!/bin/sh
/bin/sh is not anymore bash, dash (Ubuntu&amp;gt;6.06)
$ ls -al /bin/sh lrwxrwxrwx 1 root root 4 6M 30 19:44 /bin/sh -&amp;gt; dash Operators &amp;lt; : input redirection, to redirect the input given &amp;gt; : output redirection, overwriting an already existing file or creates a new file if not exist. &amp;gt;&amp;gt; : output redirection, appends an already existing file or creates a new file if not exist.</description>
    </item>
    
    <item>
      <title>CheatSheet | Jupyter</title>
      <link>https://koreanbear89.github.io/engineering/1.-cheatsheets/cheatsheet-jupyter/</link>
      <pubDate>Thu, 21 Oct 2021 09:00:00 +0000</pubDate>
      
      <guid>https://koreanbear89.github.io/engineering/1.-cheatsheets/cheatsheet-jupyter/</guid>
      <description>1. Setup Jupyter-Lab $ conda install -c conda-forge jupyter jupyterlab nbconvert # nodejs&amp;gt;12.0.0 needed $ conda install -c conda-forge nodejs $ conda install -c conda-forge/label/gcc7 nodejs $ conda install -c conda-forge/label/cf201901 nodejs $ conda install -c conda-forge/label/cf202003 nodejs # v13.10 $ conda update nodejs # v16.13 # if above not workconda uninstall --force nodejs $ conda uninstall --force nodejs # remove all $ conda install nodejs -c conda-forge --repodata-fn=repodata.json $ pip install jupyterlab-unfold # theme $ pip install theme-darcular # do not need new node version $ conda install -c conda-forge theme-darcula $ jupyter labextension install @arbennett/base16-nord # theme Add conda environment to jupyter # Create conda environment $ conda create --name &amp;quot;myenv&amp;quot; python=3.</description>
    </item>
    
    <item>
      <title>CheatSheet | Regex</title>
      <link>https://koreanbear89.github.io/engineering/1.-cheatsheets/cheatsheet-regex/</link>
      <pubDate>Mon, 02 Aug 2021 09:00:00 +0000</pubDate>
      
      <guid>https://koreanbear89.github.io/engineering/1.-cheatsheets/cheatsheet-regex/</guid>
      <description>Introduction reference. https://www.dataquest.io/wp-content/uploads/2019/03/python-regular-expressions-cheat-sheet.pdf # including kor/eng/num/- &amp;quot;[가-힣|a-z|0-9|\-]+&amp;quot; 1. Special Characters ^ | Matches the expression to its right at the start of a string. It matches every such instance before each \n in the string. $ | Matches the expression to its</description>
    </item>
    
    <item>
      <title>CheatSheet | Nginx</title>
      <link>https://koreanbear89.github.io/engineering/1.-cheatsheets/cheatsheet-nginx/</link>
      <pubDate>Mon, 26 Jul 2021 09:00:13 +0000</pubDate>
      
      <guid>https://koreanbear89.github.io/engineering/1.-cheatsheets/cheatsheet-nginx/</guid>
      <description>Introduction Nginx : light-weight Web server
generally used as HTTP Web Server, Reverse Proxy Server, Load Balancer Reverse Proxy
Proxy server : is a server that acts as an intermediary between a client and the server
Load balancing : Proxies distribute requests to a group of servers,
Encryption : Proxies encrypt the data to keep it from being read during transfer.
Caching : Proxies speed up access to information by storing the results of user requests in the server’s cache for a specified time</description>
    </item>
    
    <item>
      <title>HTML | Snippet</title>
      <link>https://koreanbear89.github.io/engineering/2.-languages/html-snippet/</link>
      <pubDate>Wed, 09 Jun 2021 09:00:13 +0000</pubDate>
      
      <guid>https://koreanbear89.github.io/engineering/2.-languages/html-snippet/</guid>
      <description>
HTTP request using ajax &amp;lt;script&amp;gt; $.ajax({url: &amp;quot;&amp;lt;HOST_URL&amp;gt;&amp;quot;, method : &amp;quot;GET&amp;quot;, datatype : &amp;quot;JSON&amp;quot;}) .done(function(data) { alert(&#39;Done&#39;);}) .fail(function(xhr, status, error){alert(&#39;Failed&#39;);}); }); &amp;lt;/script&amp;gt; </description>
    </item>
    
    <item>
      <title>Hanwoong Kim</title>
      <link>https://koreanbear89.github.io/about/</link>
      <pubDate>Mon, 03 May 2021 09:00:00 +0000</pubDate>
      
      <guid>https://koreanbear89.github.io/about/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Python #5 | 3rd-Party Modules</title>
      <link>https://koreanbear89.github.io/engineering/2.-languages/python-5-3rd-party-modules/</link>
      <pubDate>Tue, 12 Jan 2021 09:00:00 +0000</pubDate>
      
      <guid>https://koreanbear89.github.io/engineering/2.-languages/python-5-3rd-party-modules/</guid>
      <description>Introduction Matplotlib Interface
pyplot interface : Rely on pyplot to automatically create and manage the figures and axes, and use pyplot functions for plotting. (MATLAB-like interface)
object-oriented interface : Explicitly create figures and axes, and call methods on them
import matplotlib.pyplot as plt import numpy as np # pyplot interface (MATLAB-like, rely on pyplot) x = np.linspace(0,2,100) plt.plot(x,x**2) # Recommended) object-oriented interface (create figures and axes manually) fig, ax = plt.</description>
    </item>
    
    <item>
      <title>CheatSheet | Spark</title>
      <link>https://koreanbear89.github.io/engineering/1.-cheatsheets/cheatsheet-spark/</link>
      <pubDate>Fri, 11 Dec 2020 09:00:00 +0000</pubDate>
      
      <guid>https://koreanbear89.github.io/engineering/1.-cheatsheets/cheatsheet-spark/</guid>
      <description>1. Introduction 1.1 Terminologies
Job : A piece of code that reads some input (HDFS or local), performs some computation and writes output.
Stages : Jobs are divided into stages. Stages are classified as a Map or reduce stages. Stages are divided based on computational boundaries, all computations cannot be Updated in a single Stage. It happens over many stages.
Tasks : Each stage has some tasks. One task is executed on one partition of data on one executor (machine).</description>
    </item>
    
    <item>
      <title>CheatSheet | Docker</title>
      <link>https://koreanbear89.github.io/engineering/1.-cheatsheets/cheatsheet-docker/</link>
      <pubDate>Tue, 10 Nov 2020 09:00:13 +0000</pubDate>
      
      <guid>https://koreanbear89.github.io/engineering/1.-cheatsheets/cheatsheet-docker/</guid>
      <description>Introduction Contents
Install docker ∑in centos
Frequently used docker commands
FIle sharing in docker (bind, volume)
Dockerfile instruction
Docker compose
Docker swarm
Glossary
swarm : almost same with word &amp;ldquo;cluster&amp;rdquo; node (manager/worker) : A unit of server in a cluster. You can run swarm commands only on the manager node. service : A unit of modules in project, a basic distribution unit, stack : You can think of it as a unit of a project, and containers grouped into one stack basically belong to the same overlay network.</description>
    </item>
    
    <item>
      <title>CheatSheet | Hadoop</title>
      <link>https://koreanbear89.github.io/engineering/1.-cheatsheets/cheatsheet-hdfs/</link>
      <pubDate>Tue, 03 Mar 2020 09:00:13 +0000</pubDate>
      
      <guid>https://koreanbear89.github.io/engineering/1.-cheatsheets/cheatsheet-hdfs/</guid>
      <description>Introduction Hadoop : A framework that allows for the distributed processing of large data sets across clusters of computers using simple programming models
Based on Java
Save data in Google File System (2003) and process this big data with Map Reduce (2004)
Modules :
Hadoop Distributed File System : A distributed file system that provides high-throughput access to application data
Hadoop YARN : A framework for job scheduling and cluster resource management</description>
    </item>
    
    <item>
      <title>CheatSheet | VIM</title>
      <link>https://koreanbear89.github.io/engineering/1.-cheatsheets/cheatsheet-vim/</link>
      <pubDate>Sun, 26 Jan 2020 09:00:00 +0000</pubDate>
      
      <guid>https://koreanbear89.github.io/engineering/1.-cheatsheets/cheatsheet-vim/</guid>
      <description>1. Setup vim Install Vundle
git clone [GitHub - VundleVim/Vundle.vim: Vundle, the plug-in manager for Vim](https://github.com/VundleVim/Vundle.vim.git) ~/.vim/bundle/Vundle.vim color scheme setup
Jellybean color scheme official install
And simply add line color jellybean in .vimrc
mkdir -p ~/.vim/colors cd ~/.vim/colors curl -O https://raw.githubusercontent.com/nanotech/jellybeans.vim/master/colors/jellybeans.vim write .vimrc
wget https://raw.githubusercontent.com/jjeaby/jscript/master/.vimrc
Added Plugin &#39;preservim/nerdcommenter&#39;
install plugins in vimrc
:PluginInstall Shell
# install Vundle git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim # setup jellybean color scheme mkdir -p ~/.vim/colors cd ~/.</description>
    </item>
    
    <item>
      <title>ML Basic #9 | Neural Architecture Search</title>
      <link>https://koreanbear89.github.io/research/2.-machine-learning/ml09-neural-architecture-search/</link>
      <pubDate>Wed, 11 Dec 2019 09:00:13 +0000</pubDate>
      
      <guid>https://koreanbear89.github.io/research/2.-machine-learning/ml09-neural-architecture-search/</guid>
      <description>0. Introduction Neural Architecture Search : A technique for automating the design of Artificial Neural Network 1. NAS : Neural Architecture Search (Google, 2017) Introduction : Neural Nets are still hard to design. And this paper presents a gradient-based method for finding good architectures. Methods : use RNN controller which returns HyperParams of Conv in the order of (FH &amp;gt; FW &amp;gt; SH &amp;gt; SW &amp;gt; NF , Fig4) to</description>
    </item>
    
    <item>
      <title>Linear Algebra for ML #5 | Singular Value Decomposition</title>
      <link>https://koreanbear89.github.io/mathematics/1.-linear-algebra/linear-algebra-for-ml-lec5/</link>
      <pubDate>Mon, 29 Jul 2019 09:00:13 +0000</pubDate>
      
      <guid>https://koreanbear89.github.io/mathematics/1.-linear-algebra/linear-algebra-for-ml-lec5/</guid>
      <description>5.1 Singular Value decomposition (SVD) singular value decomposition (SVD) : is a factorization of a real or complex matrix that generalizes the eigendecomposition (EVD) of a square normal matrix to any $m \times n$ matrix via an extension of the polar decomposition. $$ A = U \Sigma V^T$$ $A \in \mathbb{R}^{m \times n}$ : A given rectangular matrix $U \in \mathbb{R}^{m\times m} $ : matrices with orthonormal columns, providing an</description>
    </item>
    
    <item>
      <title>Linear Algebra for ML #4 | Eigen Decomposition </title>
      <link>https://koreanbear89.github.io/mathematics/1.-linear-algebra/linear-algebra-for-ml-lec4/</link>
      <pubDate>Sun, 07 Jul 2019 09:00:13 +0000</pubDate>
      
      <guid>https://koreanbear89.github.io/mathematics/1.-linear-algebra/linear-algebra-for-ml-lec4/</guid>
      <description>4.0 Introduction Goal : We want to get a diagonalized matrix $D$ of a given matrix $A$ in the form of $ D = V^{-1}AV$ for some reasons such as computation resource. The above diagonalization process is also called eigendecomposition ($A = VDV^{-1}$) because we can find the followings from above equation, $VD=AV$ $D$ is a diagonal matrix with eigenvalues in diagonal entries $V$ is a matrix whose column vectors</description>
    </item>
    
    <item>
      <title>Linear Algebra for ML #3 | Least Square </title>
      <link>https://koreanbear89.github.io/mathematics/1.-linear-algebra/linear-algebra-for-ml-lec3/</link>
      <pubDate>Mon, 01 Jul 2019 09:00:13 +0000</pubDate>
      
      <guid>https://koreanbear89.github.io/mathematics/1.-linear-algebra/linear-algebra-for-ml-lec3/</guid>
      <description>3.0 Least Square Inner Product : Given $ \mathbf{u,v} \in \mathbb{R}^n$, we can consider $ \mathbf{u,v} $ as $n \times 1$ matrices. The number $\mathbf{u^Tv}$ is called inner product or dot product, and it is written as $ \mathbf{u \cdot v} $. Vector Norm : The length or magnitude of $\mathbf{v}$, can be calculated as $ \sqrt{ \mathbf{v} \cdot \mathbf{v} }$ $L_p$ Norm : $ \Vert \mathbf{x} \Vert_p = (</description>
    </item>
    
    <item>
      <title>Linear Algebra for ML #2 | Linear System &amp; Linear Transform </title>
      <link>https://koreanbear89.github.io/mathematics/1.-linear-algebra/linear-algebra-for-ml-lec2/</link>
      <pubDate>Wed, 08 May 2019 09:00:13 +0000</pubDate>
      
      <guid>https://koreanbear89.github.io/mathematics/1.-linear-algebra/linear-algebra-for-ml-lec2/</guid>
      <description>2.1 Linear Equation and Linear System Linear Equation is an equation that can be written in the form $$ a_1x_1 + &amp;hellip;. a_nx_n = b $$ The above equation can be written as $ \textbf{a}^T \textbf{x} = b $. Linear System is a collection of one or more linear equations Identity Matrix : $I$ is a square matrix whose diagonal entries are all 1&amp;rsquo;s and all the other entries are</description>
    </item>
    
  </channel>
</rss>
